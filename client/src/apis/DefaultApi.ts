/* tslint:disable */
/* eslint-disable */
/**
 * serverless-http-test-app
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface GetHartaRequest {
    name1: string;
    name2: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async getRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/swagger/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async get(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getBartaRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/barta`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getBarta(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getBartaRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getHartaRaw(requestParameters: GetHartaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.name1 === null || requestParameters.name1 === undefined) {
            throw new runtime.RequiredError('name1','Required parameter requestParameters.name1 was null or undefined when calling getHarta.');
        }

        if (requestParameters.name2 === null || requestParameters.name2 === undefined) {
            throw new runtime.RequiredError('name2','Required parameter requestParameters.name2 was null or undefined when calling getHarta.');
        }

        const queryParameters: any = {};

        if (requestParameters.name1 !== undefined) {
            queryParameters['name1'] = requestParameters.name1;
        }

        if (requestParameters.name2 !== undefined) {
            queryParameters['name2'] = requestParameters.name2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/harta`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getHarta(requestParameters: GetHartaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getHartaRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
